package com.example.android.ui.screen

import android.content.Intent
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import coil.compose.AsyncImage
import com.example.android.data.model.AnimalScore
import androidx.compose.foundation.Image
import coil.compose.rememberAsyncImagePainter
import androidx.compose.ui.layout.ContentScale
import android.util.Log
import androidx.compose.runtime.LaunchedEffect
import android.graphics.BitmapFactory
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.runtime.remember
import com.example.android.utils.ImageUtils
import com.example.android.utils.ImageUtils.uriToAccessibleFile
import android.net.Uri
import android.app.DownloadManager
import android.content.Context
import android.os.Environment
import android.widget.Toast
import android.provider.MediaStore
import android.content.ContentValues
import java.net.URL
import android.app.Activity
import android.content.pm.PackageManager
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import android.os.Build
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.ui.draw.clip
import androidx.compose.ui.res.painterResource
import com.example.android.R
import java.io.File
import com.example.android.MainActivity


@Composable
fun ResultScreen(
    uploadResult: String,
    uploadMessage: String?,
    topKResults: List<AnimalScore>,
    sharePageUrl: String?,
    shareCardUrl: String?,
    navController: NavHostController,
    onRetry: () -> Unit,
    uploadedImageUri: String?
) {
    val context = LocalContext.current
    val scrollState = rememberScrollState()
    Log.d("ShareCardURL", "Í≥µÏú† Ïπ¥Îìú URL: $shareCardUrl")
    LaunchedEffect(Unit) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU &&
            ContextCompat.checkSelfPermission(
                context,
                android.Manifest.permission.READ_MEDIA_IMAGES
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            ActivityCompat.requestPermissions(
                context as Activity,
                arrayOf(android.Manifest.permission.READ_MEDIA_IMAGES),
                1001
            )
        }
    }

    LaunchedEffect(uploadedImageUri) {
        uploadedImageUri?.let {
            Log.d("URI ÌôïÏù∏", "uploadedImageUri = $it")
            when {
                it.startsWith("content://") -> Log.d("URI ÌôïÏù∏", "‚úÖ Í∞§Îü¨Î¶¨ Ïù¥ÎØ∏ÏßÄ")
                it.startsWith("file://") -> Log.d("URI ÌôïÏù∏", "‚úÖ ÏûÑÏãú Ï†ÄÏû• ÌååÏùº")
                it.startsWith("https://") -> Log.d("URI ÌôïÏù∏", "‚úÖ Ïõπ Ïù¥ÎØ∏ÏßÄ URL")
                else -> Log.d( "URI ÌôïÏù∏", "‚ùå Ïïå Ïàò ÏóÜÎäî URI ÌòïÏãù")
            }
        } ?: Log.d("URI ÌôïÏù∏", "‚ùå uploadedImageUri = null")
    }

    val bitmap = remember(uploadedImageUri) {
        uploadedImageUri?.let { path ->
            try {
                val realPath = if (path.startsWith("file://")) Uri.parse(path).path else path
                BitmapFactory.decodeFile(realPath)
            } catch (e: Exception) {
                Log.e("üõë", "ÌååÏùº ÎîîÏΩîÎî© Ïã§Ìå®: ${e.message}")
                null
            }
        }
    }
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp)
            .verticalScroll(scrollState),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {

        Image(
            painter = painterResource(id = R.drawable.imglogo),
            contentDescription = "Ïï± Î°úÍ≥†",
            modifier = Modifier
                .size(150.dp)
        )

        // Ïù¥ÎØ∏ÏßÄ ÌëúÏãú
        bitmap?.let {
            val width = it.width
            val height = it.height
            val aspectRatio = width.toFloat() / height.toFloat()

            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .aspectRatio(aspectRatio)
                    .border(5.dp, Color(0xFF705438), RoundedCornerShape(12.dp))
                    .clip(RoundedCornerShape(12.dp)),
                contentAlignment = Alignment.Center
            ) {
                Image(
                    bitmap = it.asImageBitmap(),
                    contentDescription = "ÏóÖÎ°úÎìúÌïú Ïù¥ÎØ∏ÏßÄ",
                    contentScale = ContentScale.Fit,
                    modifier = Modifier.fillMaxSize()
                )
            }
        }


        Spacer(modifier = Modifier.height(10.dp))

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .clip(RoundedCornerShape(12.dp))
                .background(Color(0xFFFFF3E9)),
            contentAlignment = Alignment.Center
        ){
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {

                Spacer(modifier = Modifier.height(16.dp))

                Image(
                    painter = painterResource(id = R.drawable.lbyour_result),
                    contentDescription = "ÎãπÏã†Ïùò Í≤∞Í≥ºÎäî",
                    modifier = Modifier
                        .height(50.dp)
                        .width(150.dp)
                )

                Spacer(modifier = Modifier.height(16.dp))

                // Î©îÏãúÏßÄ Ï∂úÎ†•
                uploadMessage?.let {
                    Text(
                        text = it,
                        style = MaterialTheme.typography.bodyMedium,
                        modifier = Modifier.padding(top = 8.dp)
                    )
                }

                // Top 2 ÌòºÌï© Î∞î ÏãúÍ∞ÅÌôî
                if (topKResults.size >= 2) {
                    Spacer(modifier = Modifier.height(8.dp))

                    val first = topKResults[0]
                    val second = topKResults[1]

                    CombinedAnimalBar(first = first, second = second)
                }
            }
        }

        Spacer(modifier = Modifier.height(24.dp))

        Image(
            painter = painterResource(id = R.drawable.lbcheck_your_animal),
            contentDescription = "ÏπúÍµ¨Îì§Ïùò ÎèôÎ¨ºÏÉÅÎèÑ ÌôïÏù∏Ìï¥Î¥ê!!",
            modifier = Modifier
                .height(50.dp)
                .width(250.dp)
        )

        // Î≤ÑÌäº ÏòÅÏó≠
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.Center
        ) {
            Image(
                painter = painterResource(id = R.drawable.btrestart),
                contentDescription = "Îã§ÏãúÌïòÍ∏∞",
                modifier = Modifier
                    .height(50.dp)
                    .width(150.dp)
                    .clickable {
                        navController.popBackStack("home_screen", inclusive = true)
                        navController.navigate("home_screen")
                    }
            )

            Spacer(modifier = Modifier.width(24.dp))

            shareCardUrl?.let { url ->
                Image(
                    painter = painterResource(id = R.drawable.btsharing),
                    contentDescription = "Í≥µÏú†",
                    modifier = Modifier
                        .height(50.dp)
                        .width(150.dp)
                        .clickable {
                            val shareIntent = Intent().apply {
                                action = Intent.ACTION_SEND
                                putExtra(Intent.EXTRA_TEXT, url)
                                type = "text/plain"
                            }
                            context.startActivity(Intent.createChooser(shareIntent, "Í≤∞Í≥º Í≥µÏú†ÌïòÍ∏∞"))
                        }
                )

                Spacer(modifier = Modifier.width(16.dp))

                shareCardUrl?.let { imageUrl ->
                    Button(
                        onClick = {
                            saveImageToGallery(context, imageUrl)
                        },
                        modifier = Modifier.weight(1f)
                    ) {
                        Text("Ï†ÄÏû•")
                    }
                }
            }
        }
        Spacer(modifier = Modifier.height(24.dp))
        val context = LocalContext.current

        Button(
            onClick = {
                val intent = Intent(context, MainActivity::class.java).apply {
                    flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
                }
                context.startActivity(intent)
            },
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 8.dp)
        ) {
            Text("‚¨Ö ÌôàÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞")
        }
    }
}

@Composable
fun CombinedAnimalBar(
    first: AnimalScore,
    second: AnimalScore
) {
    val total = first.score + second.score
    val firstRatio = first.score / total
    val secondRatio = second.score / total

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(12.dp)
    ) {
        Spacer(modifier = Modifier.height(12.dp))

        AnimalBarRow(
            emoji = getEmoji(first.animal),
            name = first.animal,
            percent = firstRatio,
            barColor = Color(0xFF7AD8F7),
            backgroundColor = Color(0xFFC7F1FF)
        )

        Spacer(modifier = Modifier.height(8.dp))

        AnimalBarRow(
            emoji = getEmoji(second.animal),
            name = second.animal,
            percent = secondRatio,
            barColor = Color(0xFFFFA680),
            backgroundColor = Color(0xFFFFD8C7)
        )
    }
}


@Composable
fun AnimalBarRow(
    emoji: String,
    name: String,
    percent: Float,
    barColor: Color,
    backgroundColor: Color
) {
    val percentLabel = "${(percent * 100).toInt()}%"

    Column {
        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text("$emoji $name", modifier = Modifier.weight(1f))
            Text(percentLabel)
        }

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(10.dp)
                .background(backgroundColor, shape = MaterialTheme.shapes.extraSmall)
        ) {
            Box(
                modifier = Modifier
                    .fillMaxHeight()
                    .fillMaxWidth(percent)
                    .background(barColor, shape = MaterialTheme.shapes.extraSmall)
            )
        }
    }
}

// ÎèôÎ¨º Ïù¥Î¶ÑÏóê Îî∞Îùº Ïù¥Î™®ÏßÄ Îß§Ïπ≠
fun getEmoji(animal: String): String {
    return when (animal) {
        "Í∞ïÏïÑÏßÄÏÉÅ" -> "üê∂"
        "Í≥†ÏñëÏù¥ÏÉÅ" -> "üê±"
        "Í≥∞ÏÉÅ" -> "üêª"
        "ÌÜ†ÎÅºÏÉÅ" -> "üê∞"
        "Í±∞Î∂ÅÏù¥ÏÉÅ" -> "üê¢"
        "ÏÇ¨Ïä¥ÏÉÅ" -> "ü¶å"
        "ÎäëÎåÄÏÉÅ" -> "üê∫"
        "Ìò∏ÎûëÏù¥ÏÉÅ" -> "üêØ"
        "Îã§ÎûåÏ•êÏÉÅ" -> "üêøÔ∏è"
        "Í≥µÎ£°ÏÉÅ" -> "ü¶ñ"
        "Î±ÄÏÉÅ" -> "üêç"
        else -> "üêæ"
    }
}


fun downloadImage(context: Context, imageUrl: String) {
    try {
        Toast.makeText(context, "Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû•ÏùÑ ÏãúÏûëÌñàÏñ¥Ïöî!", Toast.LENGTH_SHORT).show()
        Log.d("ImageSave", "Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû• ÏöîÏ≤≠ Î≥¥ÎÉÑ: $imageUrl")

        val filename = "animal_face_result_${System.currentTimeMillis()}.png"
        val request = DownloadManager.Request(Uri.parse(imageUrl)).apply {
            setTitle("ÎèôÎ¨ºÏÉÅ Í≤∞Í≥º Ï†ÄÏû•")
            setDescription("Ïù¥ÎØ∏ÏßÄÎ•º Ï†ÄÏû• Ï§ëÏûÖÎãàÎã§.")
            val filename = "animal_face_result_${System.currentTimeMillis()}.png"
            setDestinationInExternalPublicDir(Environment.DIRECTORY_PICTURES, filename)
            setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)
            setAllowedNetworkTypes(DownloadManager.Request.NETWORK_WIFI or DownloadManager.Request.NETWORK_MOBILE)
        }

        val downloadManager = context.getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager
        downloadManager.enqueue(request)

        Toast.makeText(context, "Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû•ÏùÑ ÏãúÏûëÌñàÏñ¥Ïöî!", Toast.LENGTH_SHORT).show()
    } catch (e: Exception) {
        Toast.makeText(context, "Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû• Ïã§Ìå®: ${e.message}", Toast.LENGTH_SHORT).show()
    }
}


fun saveImageToGallery(context: Context, imageUrl: String) {
    CoroutineScope(Dispatchers.IO).launch {
        Log.d("ImageSave", "Í≥µÏú† Ïπ¥Îìú Ï†ÄÏû• URL: $imageUrl")
        val contentResolver = context.contentResolver
        val filename = "animal_face_result_${System.currentTimeMillis()}.png"
        val imageCollection = MediaStore.Images.Media.getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY)

        val imageDetails = ContentValues().apply {
            put(MediaStore.Images.Media.DISPLAY_NAME, filename)
            put(MediaStore.Images.Media.MIME_TYPE, "image/png")
            put(MediaStore.Images.Media.RELATIVE_PATH, Environment.DIRECTORY_PICTURES + "/AnimalFaceApp")
            put(MediaStore.Images.Media.IS_PENDING, 1)
        }

        val imageUri = contentResolver.insert(imageCollection, imageDetails)

        if (imageUri != null) {
            try {
                val outputStream = contentResolver.openOutputStream(imageUri)
                val inputStream = URL(imageUrl).openStream()

                inputStream.use { input ->
                    outputStream?.use { output ->
                        input.copyTo(output)
                        output.flush()
                    }
                }

                imageDetails.clear()
                imageDetails.put(MediaStore.Images.Media.IS_PENDING, 0)
                contentResolver.update(imageUri, imageDetails, null, null)

                withContext(Dispatchers.Main) {
                    Toast.makeText(context, "Í∞§Îü¨Î¶¨Ïóê Ïù¥ÎØ∏ÏßÄÍ∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!", Toast.LENGTH_SHORT).show()
                }
            } catch (e: Exception) {
                Log.e("ImageSave", "Ï†ÄÏû• Ïã§Ìå® ÏòàÏô∏", e)
                withContext(Dispatchers.Main) {
                    Toast.makeText(context, "Ï†ÄÏû• Ïã§Ìå®: ${e.message}", Toast.LENGTH_SHORT).show()
                }
            }
        } else {
            withContext(Dispatchers.Main) {
                Toast.makeText(context, "Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû• Ïã§Ìå® (URI ÏÉùÏÑ± Ïã§Ìå®)", Toast.LENGTH_SHORT).show()
            }
        }
    }
}
