package com.example.android.ui.screen

import android.content.Intent
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import coil.compose.AsyncImage
import com.example.android.data.model.AnimalScore

@Composable
fun ResultScreen(
    uploadResult: String,
    uploadMessage: String?,
    topKResults: List<AnimalScore>,
    shareCardUrl: String?,
    navController: NavHostController,
    onRetry: () -> Unit,
    uploadedImageUri: String?
) {
    val context = LocalContext.current

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp)
    ) {
        // Ïù¥ÎØ∏ÏßÄ ÌëúÏãú
        uploadedImageUri?.let { uri ->
            Spacer(modifier = Modifier.height(16.dp))
            AsyncImage(
                model = uri,
                contentDescription = "ÏóÖÎ°úÎìúÌïú Ïù¥ÎØ∏ÏßÄ",
                modifier = Modifier
                    .fillMaxWidth()
                    .height(240.dp)
            )
        }

        // ÏòàÏ∏° Í≤∞Í≥º Ï∂úÎ†•
        Text(
            text = "ÎÇòÏùò ÎèôÎ¨ºÏÉÅÏùÄ",
            style = MaterialTheme.typography.labelLarge
        )
        Text(
            text = "$uploadResult ÏÉÅ!!",
            style = MaterialTheme.typography.titleLarge,
            modifier = Modifier.padding(bottom = 16.dp)
        )

        // Î©îÏãúÏßÄ Ï∂úÎ†•
        uploadMessage?.let {
            Text(
                text = it,
                style = MaterialTheme.typography.bodyMedium,
                modifier = Modifier.padding(top = 8.dp)
            )
        }

        // Top 2 ÌòºÌï© Î∞î ÏãúÍ∞ÅÌôî
        if (topKResults.size >= 2) {
            Text(
                text = "ÏòàÏ∏° Í≤∞Í≥º:",
                style = MaterialTheme.typography.titleMedium,
                modifier = Modifier.padding(top = 16.dp)
            )
            Spacer(modifier = Modifier.height(8.dp))

            val first = topKResults[0]
            val second = topKResults[1]

            CombinedAnimalBar(first = first, second = second)
        }

        Spacer(modifier = Modifier.height(24.dp))

        // Î≤ÑÌäº ÏòÅÏó≠
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Button(
                onClick = {
                    navController.popBackStack("home", inclusive = true)
                    navController.navigate("home")
                },
                modifier = Modifier.weight(1f)
            ) {
                Text("Îã§ÏãúÌïòÍ∏∞")
            }

            Spacer(modifier = Modifier.width(16.dp))

            shareCardUrl?.let { url ->
                Button(
                    onClick = {
                        val shareIntent = Intent().apply {
                            action = Intent.ACTION_SEND
                            putExtra(Intent.EXTRA_TEXT, url)
                            type = "text/plain"
                        }
                        context.startActivity(Intent.createChooser(shareIntent, "Í≤∞Í≥º Í≥µÏú†ÌïòÍ∏∞"))
                    },
                    modifier = Modifier.weight(1f)
                ) {
                    Text("Í≥µÏú†")
                }
            }
        }
    }
}

@Composable
fun CombinedAnimalBar(
    first: AnimalScore,
    second: AnimalScore
) {
    val total = first.score + second.score
    val firstRatio = first.score / total
    val secondRatio = second.score / total

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(12.dp)
            .background(MaterialTheme.colorScheme.surfaceVariant, shape = MaterialTheme.shapes.medium)
            .padding(16.dp)
    ) {
        Text("Top 2 ÏòàÏ∏° Í≤∞Í≥º", style = MaterialTheme.typography.titleMedium)

        Spacer(modifier = Modifier.height(12.dp))

        // Ï≤´ Î≤àÏß∏ ÎèôÎ¨º
        AnimalBarRow(
            emoji = getEmoji(first.animal),
            name = first.animal,
            percent = firstRatio,
            barColor = MaterialTheme.colorScheme.primary
        )

        Spacer(modifier = Modifier.height(8.dp))

        // Îëê Î≤àÏß∏ ÎèôÎ¨º
        AnimalBarRow(
            emoji = getEmoji(second.animal),
            name = second.animal,
            percent = secondRatio,
            barColor = MaterialTheme.colorScheme.secondary
        )
    }
}

@Composable
fun AnimalBarRow(
    emoji: String,
    name: String,
    percent: Float,
    barColor: Color
) {
    val percentLabel = "${(percent * 100).toInt()}%"

    Column {
        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text("$emoji $name", modifier = Modifier.weight(1f))
            Text(percentLabel)
        }

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(10.dp)
                .background(Color.LightGray.copy(alpha = 0.3f), shape = MaterialTheme.shapes.extraSmall)
        ) {
            Box(
                modifier = Modifier
                    .fillMaxHeight()
                    .fillMaxWidth(percent)
                    .background(barColor, shape = MaterialTheme.shapes.extraSmall)
            )
        }
    }
}

// ÎèôÎ¨º Ïù¥Î¶ÑÏóê Îî∞Îùº Ïù¥Î™®ÏßÄ Îß§Ïπ≠
fun getEmoji(animal: String): String {
    return when (animal) {
        "Í∞ïÏïÑÏßÄÏÉÅ" -> "üê∂"
        "Í≥†ÏñëÏù¥ÏÉÅ" -> "üê±"
        "Í≥∞ÏÉÅ" -> "üêª"
        "ÌÜ†ÎÅºÏÉÅ" -> "üê∞"
        "Í±∞Î∂ÅÏù¥ÏÉÅ" -> "üê¢"
        "ÏÇ¨Ïä¥ÏÉÅ" -> "ü¶å"
        "ÎäëÎåÄÏÉÅ" -> "üê∫"
        "Ìò∏ÎûëÏù¥ÏÉÅ" -> "üêØ"
        "Îã§ÎûåÏ•êÏÉÅ" -> "üêøÔ∏è"
        "Í≥µÎ£°ÏÉÅ" -> "ü¶ñ"
        "Î±ÄÏÉÅ" -> "üêç"
        else -> "üêæ"
    }
}
